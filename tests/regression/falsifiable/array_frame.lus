node M() returns (A: int^4)
let
  A = [0, 1, 2, 3];
tel

node N(in: int^4) returns (A1, A2, A3, A4, A5, A6, A7, A8: int^4; B1, B2: int^4^4);
let
  frame (A1, A2, A3, A4, A5, A6, A7, A8, B1, B2)
    A1[i] = i;
    A2[i] = i;
    A3[i] = i;
    A4[i] = i;
    B1[i][j] = i+j;
    A5 = [0, 1, 2, 3];
    A6 = 0^4;
    A7 = in; 
    A8 = M();
    B2 = 0^4^4;
  let
    A1 = pre [0, 1, 2, 3]; -- A1[i] = i -> pre [0, 1, 2, 3][i];
    A2 = pre (0^4); -- A2[i] = i -> pre 0^4[i];
    A3 = pre in; -- A3[i] = i -> pre in[i];
    A4 = pre M(); -- A4[i] = i -> pre M()[i];
    B1 = pre 0^4^4; -- B1[i][j] = i + j -> pre 0^4^4[i][j]
    A5[i] = pre A5[i] + 1; -- A5[i] = [0, 1, 2, 3][i] -> pre A5[i] + 1;
    A6[i] = pre A6[i] + 1; -- A6[i] = 0^4[i] -> pre A6[i] + 1;
    A7[i] = pre A7[i] + 1; -- A7[i] = in[i] -> pre A7[i] + 1;
    A8[i] = pre A8[i] + 1; -- A8[i] = M()[i] -> pre A8[i] + 1;
    B2[i][j] = pre B2[i][j] + 1; -- B2[i][j] = 0^4^4[i][j] -> pre B2[i][j] + 1;
  tel

  check true -> A1[0] = 0;
  check true -> A2[0] = 0;
  check true -> A3[0] = 0;
  check true -> A4[0] = 0;
  check true -> A5[0] = 1;
  check true -> A6[0] = 1;
  check true -> A7[0] = 1;
  check true -> A8[0] = 1;

tel